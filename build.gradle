version = new Date().format('yyyy-MM-dd-HH-mm-ss')
group = 'de.hypoport.efi'

buildscript {
  ext {
    springBootVersion = '1.5.22.RELEASE'
  }
  repositories {
    mavenLocal()
    maven { url "http://nexus-beta.hypoport.local/nexus/content/repositories/efi" }
    jcenter()
  }
  dependencies {
    classpath("org.springframework.boot:spring-boot-gradle-plugin:$springBootVersion")
  }
}

apply plugin: 'java'
apply plugin: 'idea'
apply plugin: 'maven'
apply plugin: 'spring-boot'

sourceSets {
  main {
    output.resourcesDir = new File(buildDir, 'classes/java/main')
  }
  test {
    output.resourcesDir = new File(buildDir, 'classes/java/test')
  }
}

processResources {
  filesMatching('**/*.properties') { expand(project.properties) }
}

repositories {
  mavenLocal()
  maven { url 'http://nexus-beta.hypoport.local/nexus/content/repositories/efi' }
  jcenter()
}

uploadArchives {
  repositories {
    mavenDeployer {
      def nexusUserName = System.getenv('PEP_NEXUS_USER')
      def nexusPassword = System.getenv('PEP_NEXUS_PASSWORD')
      repository(url: "http://nexus-beta.hypoport.local/nexus/content/repositories/efi-releases/") {
        authentication(userName: "${nexusUserName}", password: "${nexusPassword}")
      }
      snapshotRepository(url: 'http://nexus-beta.hypoport.local/nexus/content/repositories/efi-snapshots/') {
        authentication(userName: "${nexusUserName}", password: "${nexusPassword}")
      }
      pom.groupId = project.group
      pom.artifactId = 'europace-bauspar-schnittstelle'
      pom.version = project.version
    }
  }
}

compileJava {
  sourceCompatibility = "1.8"
  targetCompatibility = "1.8"
}

configurations {
  all*.exclude module: 'spring-boot-starter-logging'
  compile.exclude module: "spring-boot-starter-tomcat"
}

dependencies {

  def springVersion = '4.3.25.RELEASE'
  def slf4jVersion = '1.7.26'
  def log4jVersion = '2.16.0'
  def springfoxVersion = '2.1.1'

  compile("org.springframework.boot:spring-boot-starter:$springBootVersion") {
    exclude module: "spring-boot-starter-logging"
  }
  compile("org.springframework.boot:spring-boot-starter-web:$springBootVersion") {
    exclude module: "spring-boot-starter-logging"
    exclude module: "logback-classic"
  }
  compile("org.springframework.boot:spring-boot-starter-jetty:$springBootVersion")
  compile("org.springframework.boot:spring-boot-starter-actuator:$springBootVersion")
  compile("org.springframework.boot:spring-boot-starter-log4j2:$springBootVersion")
  compile("org.springframework:spring-core:$springVersion")

  compile('commons-io:commons-io:2.4')
  compile("org.slf4j:slf4j-api:$slf4jVersion")
  compile("org.slf4j:jcl-over-slf4j:$slf4jVersion")
  compile("org.slf4j:jul-to-slf4j:$slf4jVersion")
  compile("org.apache.logging.log4j:log4j-slf4j-impl:$log4jVersion")
  compile("org.apache.logging.log4j:log4j-api:$log4jVersion")
  compile("org.apache.logging.log4j:log4j-core:$log4jVersion")

  compile('com.fasterxml.jackson.datatype:jackson-datatype-jsr310:2.6.0')

  compile("io.springfox:springfox-swagger2:${springfoxVersion}")
  compile("io.springfox:springfox-swagger-ui:${springfoxVersion}")

  testCompile("org.springframework:spring-test:$springVersion")
  testCompile('org.easytesting:fest-assert:1.4')
  testCompile('org.mockito:mockito-all:1.9.5')
  testCompile('junit:junit:4.11')
}

task writeVersionTxt {
  doLast {
    new File("$buildDir/version.txt").withWriter { out ->
      out.print project.version
    }
  }
}

task tagGit {
  doLast {
    exec {
      commandLine 'git', 'tag', "${project.version}"
    }
    exec {
      commandLine 'git', 'push', '--tags'
    }
  }
}